// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_in               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Album {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  Photo       Photo[]
}

model Photo {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  albumId       Int
  album         Album          @relation(fields: [albumId], references: [id], onDelete: Cascade)
  photoMetadata PhotoMetadata?
  post          Post[]

  @@index([albumId])
}

model PhotoMetadata {
  bucket    String
  filename  String
  width     Int
  height    Int
  latitude  Float?
  longitude Float?
  photoId   Int    @unique
  photo     Photo  @relation(fields: [photoId], references: [id])

  @@index([photoId])
}

model Post {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime
  updatedAt        DateTime?
  publishedAt      DateTime?
  photoId          Int
  hero             Photo       @relation(fields: [photoId], references: [id])
  drafts           PostDraft[] @relation("PostDraft")
  publishedDraftId Int
  publishedDraft   PostDraft   @relation("PublishedDraft", fields: [publishedDraftId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([publishedDraftId, photoId])
}

model PostDraft {
  id            Int     @id @default(autoincrement())
  title         String
  teaser        String?
  body          String? @db.Text
  postId        Int
  post          Post    @relation("PostDraft", fields: [postId], references: [id])
  publishedPost Post[]  @relation("PublishedDraft")

  @@index([postId])
}
